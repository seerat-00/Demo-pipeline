pipeline {
    agent any

    environment {
        DIRECTORY_PATH = 'C:/Users/DELL/Desktop/sem4/sit223'
        TESTING_ENVIRONMENT = 'staging'
        PRODUCTION_ENVIRONMENT = 'production'
        BUILD_TOOL = 'Maven'
        TEST_TOOL = 'JUnit'
        CODE_ANALYSIS_TOOL = 'SonarQube'
        SECURITY_SCAN_TOOL = 'OWASP Dependency-Check'
        STAGING_SERVER = 'AWS EC2 (staging)'
        PRODUCTION_SERVER = 'AWS EC2 (production)'
    } 
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/seerat-00/Demo-pipeline.git'
            }
        } 
        
        stage('Build') {
            steps {
                script {
                    echo "Using ${BUILD_TOOL} to build and package the application"
                    echo "Compiling the source code..."
                    echo "Generating necessary artifacts..."
                }
            }
        }

        stage('Unit and Integration Tests') {
            steps {
                script {
                    echo "Running unit tests using ${TEST_TOOL}..."
                    echo "Running integration tests..."
                    echo "Ensuring all components work together as expected..."
                }
            }
        }

        stage('Code Analysis') {
            steps {
                script {
                    echo "Performing code analysis using ${CODE_ANALYSIS_TOOL}..."
                    echo "Ensuring code meets industry standards..."
                }
            }
        }

        stage('Security Scan') {
            steps {
                script {
                    echo "Performing security scan using ${SECURITY_SCAN_TOOL}..."
                    echo "Identifying vulnerabilities in the code..."
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    echo "Deploying the application to the staging environment: ${STAGING_SERVER}"
                }
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                script {
                    echo "Running integration tests on the staging environment..."
                    echo "Verifying application behavior in a production-like setting..."
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    echo "Deploying the application to the production environment: ${PRODUCTION_SERVER}"
                }
            }
        }
    }

    post {
        always {
            script {
                def buildStatus = currentBuild.currentResult
                def buildUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')[0]?.UserId ?: 'GitHub User'

                emailext(
                    subject: "Pipeline ${buildStatus}: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: """
                    This is a Jenkins Pipeline Build status.
                    It has run successfully.
                    ThankYou.
                    """,
                    to: 'iseeratsharmash@gmail.com',
                    from: 'iseeratsharmash@gmail.com',
                    replyTo: 'iseeratsharmash@gmail.com'
                )
            }
        }
    }
}
